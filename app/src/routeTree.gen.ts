/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ResultsRouteImport } from './routes/results'
import { Route as IndexRouteImport } from './routes/index'
import { Route as Form3IndexRouteImport } from './routes/form3.index'
import { Route as Form2IndexRouteImport } from './routes/form2.index'
import { Route as Form1IndexRouteImport } from './routes/form1.index'

const ResultsRoute = ResultsRouteImport.update({
  id: '/results',
  path: '/results',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const Form3IndexRoute = Form3IndexRouteImport.update({
  id: '/form3/',
  path: '/form3/',
  getParentRoute: () => rootRouteImport,
} as any)
const Form2IndexRoute = Form2IndexRouteImport.update({
  id: '/form2/',
  path: '/form2/',
  getParentRoute: () => rootRouteImport,
} as any)
const Form1IndexRoute = Form1IndexRouteImport.update({
  id: '/form1/',
  path: '/form1/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/results': typeof ResultsRoute
  '/form1': typeof Form1IndexRoute
  '/form2': typeof Form2IndexRoute
  '/form3': typeof Form3IndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/results': typeof ResultsRoute
  '/form1': typeof Form1IndexRoute
  '/form2': typeof Form2IndexRoute
  '/form3': typeof Form3IndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/results': typeof ResultsRoute
  '/form1/': typeof Form1IndexRoute
  '/form2/': typeof Form2IndexRoute
  '/form3/': typeof Form3IndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/results' | '/form1' | '/form2' | '/form3'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/results' | '/form1' | '/form2' | '/form3'
  id: '__root__' | '/' | '/results' | '/form1/' | '/form2/' | '/form3/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ResultsRoute: typeof ResultsRoute
  Form1IndexRoute: typeof Form1IndexRoute
  Form2IndexRoute: typeof Form2IndexRoute
  Form3IndexRoute: typeof Form3IndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/results': {
      id: '/results'
      path: '/results'
      fullPath: '/results'
      preLoaderRoute: typeof ResultsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/form3/': {
      id: '/form3/'
      path: '/form3'
      fullPath: '/form3'
      preLoaderRoute: typeof Form3IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/form2/': {
      id: '/form2/'
      path: '/form2'
      fullPath: '/form2'
      preLoaderRoute: typeof Form2IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/form1/': {
      id: '/form1/'
      path: '/form1'
      fullPath: '/form1'
      preLoaderRoute: typeof Form1IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ResultsRoute: ResultsRoute,
  Form1IndexRoute: Form1IndexRoute,
  Form2IndexRoute: Form2IndexRoute,
  Form3IndexRoute: Form3IndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
